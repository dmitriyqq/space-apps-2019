{"version":3,"sources":["logo.svg","static/Gorod.svg","pages/Map.tsx","interfaces/IDataService.ts","services/DataService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LeafletMap","Leaflet","Icon","shadowUrl","undefined","className","iconUrl","logo","state","lat","lng","zoom","cities","shouldComponentUpdate","nextProps","_","props","lvl","updateCities","map","handleClick","e","n","min","console","log","latlng","city","dx","dy","v","onClick","handleViewportChange","viewport","setState","Math","max","a","leafletElement","bounds","getBounds","dataService","getCitiesLevel","_southWest","_northEast","error","this","position","Map","ref","center","onViewportChange","TileLayer","attribution","url","filter","population","i","Marker","icon","Default","destroyed","key","Component","YearsResponse","years","CitiesResponse","DataService","base","fetch","resp","json","level","swlat","swlng","nelat","nelng","method","headers","body","JSON","stringify","App","myfunc","Number","$","innerText","ionRangeSlider","skin","from","step","grid","grid_num","grid_snap","s","id","style","height","elevation","name","src","Gorod","type","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","imagePath","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ef7023c6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","module.exports = __webpack_public_path__ + \"static/media/Gorod.2c8efb48.svg\";","import React, { Component } from 'react'\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport Leaflet from 'leaflet';\nimport { IDataService, City, CitiesResponse } from '../interfaces/IDataService';\nimport logo from '../logo.svg';\n\nconst goodicon = new Leaflet.Icon({shadowUrl: undefined, className: 'goodicon'});\nconst badicon = new Leaflet.Icon({shadowUrl: undefined, className: 'badicon'});\n\nconst icon = new Leaflet.Icon({shadowUrl: undefined, iconUrl: logo});\n\ntype State = {\n  lat: number,\n  lng: number,\n  zoom: number,\n  cities: City[],\n}\n\ninterface IProps {\n  dataService: IDataService;\n  onClick: (city: City) => void;\n  lvl: number;\n}\n\nexport class LeafletMap extends Component<IProps, State> {\n  state: State = {\n    lat: 51.505,\n    lng: -0.09,\n    zoom: 4,\n    cities: []\n  }\n\n  async componentDidMount() {\n    this.updateCities();\n  }\n\n  shouldComponentUpdate = (nextProps: any, _: any) => {\n    if (this.props.lvl != nextProps.lvl) {\n      this.updateCities();\n      return true;\n    }\n\n    return true;\n  }\n\n  map: any;\n\n  render() {\n    const minZoom = 10;\n    const zoom = Math.max(minZoom, this.state.zoom);\n    const position: [number, number] = [this.state.lat, this.state.lng]\n    return (\n      <Map onClick={this.handleClick} ref={(ref) => { this.map = ref; }} center={position} zoom={7} onViewportChange={this.handleViewportChange}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {\n          this.state.cities.filter(city => city.population > 1000).map((city, i) => \n          <Marker icon={new Leaflet.Icon.Default({shadowUrl: undefined, className: city.destroyed ? 'bad' : 'good', iconUrl: undefined})} key={i} position={[city.lat, city.lng]}></Marker>)\n        }\n      </Map>\n    )\n  }\n\n  private handleClick = (e: any) => {\n    let n = null;\n    let min = 0.1;\n    console.log(e);\n    const latlng = e.latlng;\n    const lat = latlng.lat;\n    const lng = latlng.lng;\n\n    for (const city of this.state.cities) {\n      const dx = city.lat - lat;\n      const dy = city.lng - lng;\n\n      const v = dx * dx + dy*dy;\n      if (v < min) {\n        n = city;\n        min = v;\n      }\n\n    }\n\n    console.log(min);\n    if (n != null) {\n      this.props.onClick(n);\n    }\n  }\n\n  private handleViewportChange = (viewport: any) => {\n    this.setState({zoom: Math.max(10, viewport.zoom)})\n    this.updateCities();\n  }\n\n  private updateCities = async () => {\n    if (this.map && this.map.leafletElement) {\n      try {\n      const bounds = this.map.leafletElement.getBounds();\n\n      \n      const { cities } = await this.props.dataService.getCitiesLevel(\n        this.props.lvl, bounds._southWest.lat, bounds._southWest.lng , bounds._northEast.lat, bounds._northEast.lng);\n      \n      this.setState(() => ({ cities }))\n      } catch(error) {\n        console.error(error);\n      }\n      \n    }\n  }\n}\n","export class Year {\n    level: number = 0;\n    year: number = 1880;\n}\n\nexport class YearsResponse {\n    years: Year[] = [];\n}\n\nexport class City {\n    id: number = 0;\n    name: string = '';\n    country: string = '';\n    elevation: number = 0;\n    population: number = 0;\n    iso3: number = 0;\n    lng: number = 0;\n    lat: number = 0;\n    destroyed: boolean = false;\n}\n\nexport class CitiesResponse{\n    cities: City[] = [];\n}\n\nexport interface IDataService {\n    getYears(): Promise<YearsResponse>;\n    getCitiesLevel(level: number, swlat: number, swlng: number, nelat: number, nelng: number): Promise<CitiesResponse> \n}","import {YearsResponse, IDataService, CitiesResponse} from '../interfaces/IDataService'\n\nexport class DataService implements IDataService{\n    base: string = 'http://127.0.0.1:5000'\n\n    public async getYears(): Promise<YearsResponse> {\n        try {\n            var resp = await fetch(`${this.base}/years`);\n            var json = await resp.json();\n            return json as YearsResponse;\n        } catch (error){\n            console.error(error);\n            return new YearsResponse();\n        }\n    }\n\n    public async getCitiesLevel(level: number, swlat: number, swlng: number, nelat: number, nelng: number): Promise<CitiesResponse> {\n        try {\n            var resp = await fetch(`${this.base}/cities_below_level`, {method: 'POST', headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },body : JSON.stringify({\n                level, swlat, swlng, nelat, nelng\n            })});\n            var json = await resp.json();\n            return json as CitiesResponse;\n        } catch (error){\n            console.error(error);\n            return new CitiesResponse();\n        }\n    }\n}","import React from 'react';\nimport './App.css';\nimport { LeafletMap } from './pages/Map'\nimport { DataService } from './services/DataService';\nimport Gorod from \"./static/Gorod.svg\"\nimport { City } from './interfaces/IDataService';\n\ninterface IState {\n  lvl: number;\n  city: City | null;\n}\nclass App extends React.Component<{}, IState> {\n  constructor(props: any) {\n    super(props)\n    this.state = ({\n      lvl: 0,\n      city: null,\n    })\n  }\n\n  private handleClick = (city: City) => {\n    this.setState(() => ({city}))\n  }\n\n  componentDidMount() {\n    // const dataservice = new DataService();\n    ($(\".js-range-slider-2\") as any).ionRangeSlider({\n      skin: \"big\",\n      min: 0,\n      max: 100,\n      from: 0,\n      step: 1,            // default 1 (set step)\n      grid: true,         // default false (enable grid)\n      grid_num: 10,        // default 4 (set number of grid cells)\n      grid_snap: false    // default false (snap grid to step)\n    })\n  }\n\n  componentDidUpdate() {\n\n    ($(\".js-range-slider-2\") as any).ionRangeSlider({\n      skin: \"big\",\n      min: 0,\n      max: 100,\n      from: 0,\n      step: 1,            // default 1 (set step)\n      grid: true,         // default false (enable grid)\n      grid_num: 10,        // default 4 (set number of grid cells)\n      grid_snap: false    // default false (snap grid to step)\n    })\n  }\n\n  render() {\n\n    let s = null;\n    if (this.state.city != null) { \n      s = <div className=\"smallStakan\">\n        <label className=\"lab\">\n          <div className=\"fil\" id=\"fill\" style={{ height: `${Math.min(100 - (Math.max(this.state.city.elevation, 0) - this.state.lvl) / Math.max(this.state.city.elevation, 1) * 100, 100)}%` }}>\n            \n            \n          </div>\n        </label>\n        <h1>{this.state.city.name}</h1>\n        <h2>{this.state.city.population} чел.</h2>\n        <h2>{this.state.city.elevation} м</h2>\n        <img src={Gorod} className=\"gorod\"></img>\n      </div>\n    }\n    \n    return (\n      <div className=\"cont\">\n        <div className=\"stakan\">\n          {s}\n        </div>\n        <div className=\"map\">\n          <LeafletMap onClick={this.handleClick} dataService={new DataService()} lvl={this.state.lvl} />\n        </div>\n        <div className=\"polzynok\" onClick={this.myfunc}>\n          <input type=\"number\" className=\"js-range-slider-2\" name=\"my_range\"/>\n        </div>\n      </div>\n    );\n  }\n  myfunc = () => {\n    const a = Number($(\".irs-single\")[0].innerText)\n    this.setState({\n      lvl: a\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Leaflet from 'leaflet'\nReactDOM.render(<App />, document.getElementById('root'));\nLeaflet.Icon.Default.imagePath =\n  '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/'\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}