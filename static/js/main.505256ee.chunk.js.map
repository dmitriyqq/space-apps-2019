{"version":3,"sources":["static/Gorod.svg","pages/Map.tsx","interfaces/IDataService.ts","services/DataService.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","LeafletMap","state","zoom","map","handleClick","e","n","min","console","log","latlng","lat","lng","props","cities","city","dx","dy","v","onClick","handleViewportChange","viewport","setState","Math","max","updateCities","a","bounds","leafletElement","getBounds","needMapUpdate","_southWest","_northEast","error","this","Map","ref","center","onViewportChange","TileLayer","attribution","url","i","Marker","icon","Leaflet","Icon","Default","shadowUrl","undefined","className","destroyed","iconUrl","key","position","Component","YearsResponse","years","CitiesResponse","OverviewResponse","people","list","DataService","base","fetch","resp","json","level","swlat","swlng","nelat","nelng","method","headers","body","JSON","stringify","App","dataService","timeout","fetchCities","clearTimeout","setTimeout","getCitiesLevel","lvl","getCitiesOverview","overview","myfunc","Number","$","innerText","ionRangeSlider","skin","from","step","grid","grid_num","grid_snap","s","length","id","style","height","elevation","name","population","round","padding","c","filter","_","src","Gorod","width","window","innerWidth","type","React","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","imagePath","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.505256ee.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Gorod.2c8efb48.svg\";","import React, { Component } from 'react'\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport Leaflet from 'leaflet';\nimport { City } from '../interfaces/IDataService';\n\ninterface IProps {\n  onClick: (city: City) => void;\n  needMapUpdate: (swlat: number, swlng: number, nelat: number, nelng: number) => void\n  lvl: number;\n  cities: City[],\n}\n\nclass State {\n  zoom: number = 5;\n}\n\nexport class LeafletMap extends Component<IProps, State> {\n  state: State = {\n    zoom: 4,\n  }\n\n  async componentDidMount() {\n    this.updateCities();\n  }\n\n  map: any;\n\n  render() {\n    const minZoom = 10;\n    const zoom = Math.max(minZoom, this.state.zoom);\n    // const position: [number, number] = [this.state.lat, this.state.lng]\n    return (\n      <Map onClick={this.handleClick} ref={(ref) => { this.map = ref; }} center={[51.505,  -0.09]} zoom={7} onViewportChange={this.handleViewportChange}>\n        <TileLayer\n          attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {\n          this.props.cities.map((city, i) => \n          <Marker icon={new Leaflet.Icon.Default({shadowUrl: undefined, className: city.destroyed ? 'bad' : 'good', iconUrl: undefined})} key={i} position={[city.lat, city.lng]}></Marker>)\n        }\n      </Map>\n    )\n  }\n\n  private handleClick = (e: any) => {\n    let n = null;\n    let min = 0.1;\n    console.log(e);\n    const latlng = e.latlng;\n    const lat = latlng.lat;\n    const lng = latlng.lng;\n\n    for (const city of this.props.cities) {\n      const dx = city.lat - lat;\n      const dy = city.lng - lng;\n\n      const v = dx * dx + dy*dy;\n      if (v < min) {\n        n = city;\n        min = v;\n      }\n\n    }\n\n    console.log(min);\n    if (n != null) {\n      this.props.onClick(n);\n    }\n  }\n\n  private handleViewportChange = (viewport: any) => {\n    this.setState({zoom: Math.max(10, viewport.zoom)})\n    this.updateCities();\n  }\n\n  private updateCities = async () => {\n    try {\n      const bounds = this.map.leafletElement.getBounds();\n      this.props.needMapUpdate(bounds._southWest.lat, bounds._southWest.lng , bounds._northEast.lat, bounds._northEast.lng)\n    } catch(error) {\n      console.error(error);\n    }\n  }\n}\n","export class Year {\n    level: number = 0;\n    year: number = 1880;\n}\n\nexport class YearsResponse {\n    years: Year[] = [];\n}\n\nexport class City {\n    id: number = 0;\n    name: string = '';\n    country: string = '';\n    elevation: number = 0;\n    population: number = 0;\n    iso3: number = 0;\n    lng: number = 0;\n    lat: number = 0;\n    destroyed: boolean = false;\n}\n\nexport class CitiesResponse{\n    cities: City[] = [];\n}\n\nexport class OverviewResponse {\n    cities: number = 0;\n    people: number = 0;\n    list: {cities: City[] } = { cities: []};\n}\n\nexport interface IDataService {\n    getYears(): Promise<YearsResponse>;\n    getCitiesLevel(level: number, swlat: number, swlng: number, nelat: number, nelng: number): Promise<CitiesResponse> \n    getCitiesOverview(level: number): Promise<OverviewResponse>\n}","import {YearsResponse, IDataService, CitiesResponse, OverviewResponse} from '../interfaces/IDataService'\n\nexport class DataService implements IDataService{\n    base: string = 'https://shulaikin.tech:5000';\n\n    public async getYears(): Promise<YearsResponse> {\n        try {\n            var resp = await fetch(`${this.base}/years`);\n            var json = await resp.json();\n            return json as YearsResponse;\n        } catch (error){\n            console.error(error);\n            return new YearsResponse();\n        }\n    }\n\n    public async getCitiesLevel(level: number, swlat: number, swlng: number, nelat: number, nelng: number): Promise<CitiesResponse> {\n        try {\n            var resp = await fetch(`${this.base}/cities_below_level`, {method: 'POST', headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },body : JSON.stringify({\n                level, swlat, swlng, nelat, nelng\n            })});\n            var json = await resp.json();\n            return json as CitiesResponse;\n        } catch (error){\n            console.error(error);\n            return new CitiesResponse();\n        }\n    }\n\n    public async getCitiesOverview(level: number): Promise<OverviewResponse> {\n        try {\n            var resp = await fetch(`${this.base}/total_cities_below_level`, {method: 'POST', headers: {\n                'Content-Type': 'application/json'\n                // 'Content-Type': 'application/x-www-form-urlencoded',\n              },body : JSON.stringify({\n                level\n            })});\n            var json = await resp.json();\n            return json as OverviewResponse;\n        } catch (error){\n            console.error(error);\n            return new OverviewResponse();\n        }\n    }\n}","import React from 'react';\nimport './App.css';\nimport { LeafletMap } from './pages/Map'\nimport { DataService } from './services/DataService';\nimport Gorod from \"./static/Gorod.svg\"\nimport { City, IDataService, OverviewResponse } from './interfaces/IDataService';\n\ninterface IState {\n  lvl: number;\n  city: City | null;\n  cities: City[];\n  swlat: number;\n  swlng: number;\n  nelat: number;\n  nelng: number;\n  overview: OverviewResponse;\n}\n\nclass App extends React.Component<{}, IState> {\n  dataService: IDataService | null = null;\n  timeout : NodeJS.Timeout | null = null;\n\n  constructor(props: any) {\n    super(props)\n    this.state = ({\n      lvl: 0,\n      city: null,\n      cities: [],\n      swlat: 0,\n      swlng: 0,\n      nelat: 0,\n      nelng: 0,\n      overview: new OverviewResponse()\n    })\n\n    this.dataService = new DataService();\n  }\n\n  private handleClick = (city: City) => {\n    this.setState(() => ({city}))\n  }\n\n  componentDidMount() {\n    // const dataservice = new DataService();\n    ($(\".js-range-slider-2\") as any).ionRangeSlider({\n      skin: \"big\",\n      min: 0,\n      max: 100,\n      from: 0,\n      step: 1,            // default 1 (set step)\n      grid: true,         // default false (enable grid)\n      grid_num: 10,        // default 4 (set number of grid cells)\n      grid_snap: false    // default false (snap grid to step)\n    })\n  }\n\n  componentDidUpdate() {\n\n    ($(\".js-range-slider-2\") as any).ionRangeSlider({\n      skin: \"big\",\n      min: 0,\n      max: 100,\n      from: 0,\n      step: 1,            // default 1 (set step)\n      grid: true,         // default false (enable grid)\n      grid_num: 10,        // default 4 (set number of grid cells)\n      grid_snap: false    // default false (snap grid to step)\n    })\n  }\n\n  render() {\n\n    let s = null;\n    let city = this.state.city || ( this.state.cities && this.state.cities.length > 0 && this.state.cities[0]);\n\n    if (city) { \n      s = <div className=\"smallStakan\">\n        <label className=\"lab\">\n          <div className=\"fil\" id=\"fill\" style={{ height: `${Math.min(100 - (Math.max(city.elevation, 0) - this.state.lvl) / Math.max(city.elevation, 1) * 100, 100)}%` }}>\n          </div>\n        </label>\n        <h1>{city.name}</h1>\n        <h4>City population: </h4>\n        <h5>{city.population == 0 ? '<no-info>' : `${Math.round(city.population)} people`}</h5>\n        <h4>City elevation: {city.elevation}m</h4>\n        <h4>Cities affected: {this.state.overview.cities}</h4>\n        <h4>People affected</h4>\n        <h5>{this.state.overview.people == 0 ? '<no-info>' : `${Math.round(this.state.overview.people)} people`}</h5>\n        <h4>Major cities affected:</h4>\n        <ul style={{padding: 0}}> \n          {this.state.overview.list.cities.map(c => <li>{c.name} - {c.population} people</li>).filter((_, i) => i < 5)}\n        </ul>\n        <h2>Sea level: {this.state.lvl} m</h2>\n        <img src={Gorod} className=\"gorod\"></img>\n      </div>\n    }\n    \n    return (\n      <div className=\"cont\">\n        <div className=\"stakan\">\n          {s}\n        </div>\n        <div className=\"map\">\n          <LeafletMap onClick={this.handleClick} lvl={this.state.lvl} needMapUpdate={this.fetchCities} cities={this.state.cities}/>\n        </div>\n        <div style={{width: `${(window.innerWidth || 850) - 350}px`}}className=\"polzynok\" onClick={this.myfunc}>\n          <input type=\"number\" className=\"js-range-slider-2\" name=\"my_range\"/>\n        </div>\n      </div>\n    );\n  }\n\n  fetchCities = async (swlat: number, swlng: number, nelat: number, nelng: number) => {\n    if (this.timeout) {\n      clearTimeout(this.timeout);\n    }\n\n    this.timeout = setTimeout(async () => {\n      const { cities } = await this.dataService!.getCitiesLevel(this.state.lvl, swlat, swlng , nelat, nelng);\n      const overview = await this.dataService!.getCitiesOverview(this.state.lvl);\n      console.log(overview)\n      this.setState(() => ({ cities, swlat, swlng, nelat, nelng, overview}));\n    }, 300);\n    \n  }\n\n  myfunc = () => {\n    const a = Number($(\".irs-single\")[0].innerText)\n    this.setState(() => ({\n      lvl: a\n    }), () => {\n      const { swlat, swlng, nelat, nelng} = this.state\n      this.fetchCities(swlat, swlng, nelat, nelng)\n    })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Leaflet from 'leaflet'\nReactDOM.render(<App />, document.getElementById('root'));\nLeaflet.Icon.Default.imagePath =\n  '//cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.4/images/'\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}